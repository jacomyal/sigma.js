"use strict";(self.webpackChunk_sigma_website=self.webpackChunk_sigma_website||[]).push([[9354],{350:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"advanced/events","title":"Events","description":"Sigma.js utilizes events as a mechanism to execute specific code in response to various actions or changes within a sigma instance. This event-driven approach allows for interactive and dynamic behaviors in graph visualizations.","source":"@site/docs/advanced/events.md","sourceDirName":"advanced","slug":"/advanced/events","permalink":"/docs/advanced/events","draft":false,"unlisted":false,"editUrl":"https://github.com/jacomyal/sigma.js/tree/main/packages/website/docs/advanced/events.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"Events","sidebar_position":7},"sidebar":"sigmaDocSidebar","previous":{"title":"Layers","permalink":"/docs/advanced/layers"},"next":{"title":"Creating new packages","permalink":"/docs/advanced/new-packages"}}');var i=s(1085),r=s(1184);const a={title:"Events",sidebar_position:7},d="Events",c={},l=[{value:"Event handling API",id:"event-handling-api",level:2},{value:"Interaction events",id:"interaction-events",level:2},{value:"Node events",id:"node-events",level:3},{value:"Edge events",id:"edge-events",level:3},{value:"Stage events",id:"stage-events",level:3},{value:"Lifecycle events",id:"lifecycle-events",level:2},{value:"Custom events",id:"custom-events",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"events",children:"Events"})}),"\n",(0,i.jsx)(n.p,{children:"Sigma.js utilizes events as a mechanism to execute specific code in response to various actions or changes within a sigma instance. This event-driven approach allows for interactive and dynamic behaviors in graph visualizations."}),"\n",(0,i.jsx)(n.h2,{id:"event-handling-api",children:"Event handling API"}),"\n",(0,i.jsxs)(n.p,{children:["Sigma.js's event handling API is modeled after the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/events",children:"events"})})," package in Node. However, a distinction is that events in sigma.js, along with their payloads, are typed. This design choice benefits the development experience, especially for TypeScript users, by offering clarity about the event data."]}),"\n",(0,i.jsx)(n.h2,{id:"interaction-events",children:"Interaction events"}),"\n",(0,i.jsxs)(n.p,{children:["All interactive events in sigma.js come with a payload that contains an ",(0,i.jsx)(n.code,{children:"event"})," object. This object includes:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x"})," and ",(0,i.jsx)(n.code,{children:"y"}),": Coordinates within the container where the event occurred."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"originalEvent"}),": The original MouseEvent or TouchEvent."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"node-events",children:"Node events"}),"\n",(0,i.jsx)(n.p,{children:"Node-specific events are triggered by interactions with graph nodes. The primary node events in sigma.js are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"enterNode"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"leaveNode"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"downNode"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"clickNode"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"rightClickNode"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"doubleClickNode"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"wheelNode"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The payload for these events, in addition to the ",(0,i.jsx)(n.code,{children:"event"})," object, contains a ",(0,i.jsx)(n.code,{children:"node"})," string, which is the ID of the associated node."]}),"\n",(0,i.jsx)(n.h3,{id:"edge-events",children:"Edge events"}),"\n",(0,i.jsx)(n.p,{children:"Edge-specific events are initiated by interactions with graph edges. The primary edge events in sigma.js are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"enterEdge"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"leaveEdge"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"downEdge"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"clickEdge"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"rightClickEdge"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"doubleClickEdge"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"wheelEdge"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For these events, the payload, in addition to the ",(0,i.jsx)(n.code,{children:"event"})," object, contains an ",(0,i.jsx)(n.code,{children:"edge"})," string, which is the ID of the related edge. To ensure these events function correctly, the settings ",(0,i.jsx)(n.code,{children:"enableEdgeClickEvents"}),", ",(0,i.jsx)(n.code,{children:"enableEdgeWheelEvents"}),", and ",(0,i.jsx)(n.code,{children:"enableEdgeHoverEvents"})," must be enabled. By default, these settings are set to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"stage-events",children:"Stage events"}),"\n",(0,i.jsx)(n.p,{children:"Stage events are triggered by interactions that occur on the stage, which is the overall container of the graph. The primary stage events in sigma.js are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"downStage"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"clickStage"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"rightClickStage"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"doubleClickStage"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"wheelStage"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"lifecycle-events",children:"Lifecycle events"}),"\n",(0,i.jsx)(n.p,{children:"Sigma.js also emits events at specific lifecycle stages of the sigma instance. These events offer hooks for developers to run code at key moments in the graph's lifecycle. These events are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"beforeRender"}),": Emitted just before the graph is rendered (precisely at the beginning of the inner method ",(0,i.jsx)(n.code,{children:"render"})," method)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"afterRender"}),": Emitted immediately after the graph has been rendered (precisely at the end of the inner method ",(0,i.jsx)(n.code,{children:"render"})," method)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"resize"}),": Emitted when the sigma instance undergoes resizing."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"kill"}),": Emitted when the sigma instance is terminated."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"These lifecycle events do not come with any payload."}),"\n",(0,i.jsx)(n.h2,{id:"custom-events",children:"Custom events"}),"\n",(0,i.jsxs)(n.p,{children:["Leveraging the ",(0,i.jsx)(n.code,{children:"EventEmitter"})," nature of the sigma instance, developers can emit and listen to custom events. This capability allows for tailored interactions and behaviors beyond the built-in events."]}),"\n",(0,i.jsx)(n.p,{children:"In JavaScript:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'sigma.on("myCustomEvent", ({ data }) => console.log("data", data));\nsigma.emit("myCustomEvent", { data: "something something" });\n'})}),"\n",(0,i.jsx)(n.p,{children:"In TypeScript:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import EventEmitter from "events";\n\n// Because of the typed events, sigma must be cast to a simple EventEmitter to emit custom events:\n(sigma as EventEmitter).on("myCustomEvent", ({ data }) => console.log("data", data));\n(sigma as EventEmitter).emit("myCustomEvent", { data: "something something" });\n'})}),"\n",(0,i.jsx)(n.p,{children:"By using custom events, developers can further enhance the interactivity and responsiveness of their graph visualizations."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},1184:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var t=s(4041);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);